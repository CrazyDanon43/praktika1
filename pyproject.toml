 [project]
name = "milo"
version = "0.1.0"
description = ""
authors = [
    {name = "Vladimir Klychnikov",email = "v.klychnikov@jsa-group.ru"}
]
readme = "README.md"

package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
hardcore = {path = "hardcore"}
minio = "^7.2.15"
backoff = "^2.2.1"
python-snap7 = "^2.0.2"
sse-starlette = "^2.3.3"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
black = "^25.1.0"
ruff = "^0.11.11"
mypy = "^1.15.0"
sqlalchemy-utils = "^0.41.2"
types-redis = "^4.6.0.20240903"
pytest-asyncio = "^0.24.0"
faker = "^28.4.1"
polyfactory = "^2.16.2"
pytest-mock = "^3.14.0"
pillow = "^11.1.0"

[tool.ruff]
line-length = 120
target-version = "py311"
output-format = "grouped"

lint.task-tags = ["TODO"]

lint.select = [
    "E", "W",
    "F",
    "I",
    "D",
    "UP",
    "N",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "C4",
    "T10",
    "EM",
    "ISC",
    "ICN",
    "T20",
    "PT",
    "Q",
    "RET",
    "SIM",
    "TID",
    "DTZ",
    "ERA",
    "PD",
    "PGH",
    "PLC", "PLE", "PLR", "PLW",
    "PIE",
    "RUF",
]
lint.ignore = [
    "PLR0913",
    "ERA001",
    "ANN204",
    "C408",
    "B008",
    "RUF012",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D212",
    "ANN401",
    "ICN001",
    "UP035",
    "BLE001",
    "S608",
    "PLC1901",
    "S311",
    "S603",
    "S602",
    "S301",
    "A003",
    "D415"
]

[tool.ruff.lint.isort]
combine-as-imports = true
relative-imports-order = "closest-to-furthest"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.black]
line-length = 120
target-version = ["py311"]
color = true

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy",]
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true
check_untyped_defs = true
exclude = [
    "migrations",
    "docs",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
pythonpath = [
    "."
]
asyncio_default_fixture_loop_scope = "function"
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
markers = [
    "external: requires http proxy connection to closed resources"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
